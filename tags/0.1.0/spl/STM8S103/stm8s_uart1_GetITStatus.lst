                                      1 ;--------------------------------------------------------
                                      2 ; File Created by SDCC : free open source ANSI-C Compiler
                                      3 ; Version 3.9.0 #11195 (FreeBSD)
                                      4 ;--------------------------------------------------------
                                      5 	.module stm8s_uart1_GetITStatus
                                      6 	.optsdcc -mstm8
                                      7 	
                                      8 ;--------------------------------------------------------
                                      9 ; Public variables in this module
                                     10 ;--------------------------------------------------------
                                     11 	.globl _UART1_GetITStatus
                                     12 ;--------------------------------------------------------
                                     13 ; ram data
                                     14 ;--------------------------------------------------------
                                     15 	.area DATA
                                     16 ;--------------------------------------------------------
                                     17 ; ram data
                                     18 ;--------------------------------------------------------
                                     19 	.area INITIALIZED
                                     20 ;--------------------------------------------------------
                                     21 ; absolute external ram data
                                     22 ;--------------------------------------------------------
                                     23 	.area DABS (ABS)
                                     24 
                                     25 ; default segment ordering for linker
                                     26 	.area HOME
                                     27 	.area GSINIT
                                     28 	.area GSFINAL
                                     29 	.area CONST
                                     30 	.area INITIALIZER
                                     31 	.area CODE
                                     32 
                                     33 ;--------------------------------------------------------
                                     34 ; global & static initialisations
                                     35 ;--------------------------------------------------------
                                     36 	.area HOME
                                     37 	.area GSINIT
                                     38 	.area GSFINAL
                                     39 	.area GSINIT
                                     40 ;--------------------------------------------------------
                                     41 ; Home
                                     42 ;--------------------------------------------------------
                                     43 	.area HOME
                                     44 	.area HOME
                                     45 ;--------------------------------------------------------
                                     46 ; code
                                     47 ;--------------------------------------------------------
                                     48 	.area CODE
                                     49 ;	./src/stm8s_uart1_GetITStatus.c: 54: ITStatus UART1_GetITStatus(UART1_IT_TypeDef UART1_IT)
                                     50 ;	-----------------------------------------
                                     51 ;	 function UART1_GetITStatus
                                     52 ;	-----------------------------------------
      000000                         53 _UART1_GetITStatus:
      000000 89               [ 2]   54 	pushw	x
                                     55 ;	./src/stm8s_uart1_GetITStatus.c: 66: itpos = (uint8_t)((uint8_t)1 << (uint8_t)((uint8_t)UART1_IT & (uint8_t)0x0F));
      000001 7B 06            [ 1]   56 	ld	a, (0x06, sp)
      000003 97               [ 1]   57 	ld	xl, a
      000004 A4 0F            [ 1]   58 	and	a, #0x0f
      000006 88               [ 1]   59 	push	a
      000007 A6 01            [ 1]   60 	ld	a, #0x01
      000009 6B 02            [ 1]   61 	ld	(0x02, sp), a
      00000B 84               [ 1]   62 	pop	a
      00000C 4D               [ 1]   63 	tnz	a
      00000D 27 05            [ 1]   64 	jreq	00162$
      00000F                         65 00161$:
      00000F 08 01            [ 1]   66 	sll	(0x01, sp)
      000011 4A               [ 1]   67 	dec	a
      000012 26 FB            [ 1]   68 	jrne	00161$
      000014                         69 00162$:
                                     70 ;	./src/stm8s_uart1_GetITStatus.c: 68: itmask1 = (uint8_t)((uint8_t)UART1_IT >> (uint8_t)4);
      000014 9F               [ 1]   71 	ld	a, xl
      000015 4E               [ 1]   72 	swap	a
      000016 A4 0F            [ 1]   73 	and	a, #0x0f
                                     74 ;	./src/stm8s_uart1_GetITStatus.c: 70: itmask2 = (uint8_t)((uint8_t)1 << itmask1);
      000018 88               [ 1]   75 	push	a
      000019 A6 01            [ 1]   76 	ld	a, #0x01
      00001B 6B 03            [ 1]   77 	ld	(0x03, sp), a
      00001D 84               [ 1]   78 	pop	a
      00001E 4D               [ 1]   79 	tnz	a
      00001F 27 05            [ 1]   80 	jreq	00164$
      000021                         81 00163$:
      000021 08 02            [ 1]   82 	sll	(0x02, sp)
      000023 4A               [ 1]   83 	dec	a
      000024 26 FB            [ 1]   84 	jrne	00163$
      000026                         85 00164$:
                                     86 ;	./src/stm8s_uart1_GetITStatus.c: 74: if (UART1_IT == UART1_IT_PE)
      000026 1E 05            [ 2]   87 	ldw	x, (0x05, sp)
      000028 A3 01 00         [ 2]   88 	cpw	x, #0x0100
      00002B 26 18            [ 1]   89 	jrne	00117$
                                     90 ;	./src/stm8s_uart1_GetITStatus.c: 77: enablestatus = (uint8_t)((uint8_t)UART1->CR1 & itmask2);
      00002D C6 52 34         [ 1]   91 	ld	a, 0x5234
      000030 14 02            [ 1]   92 	and	a, (0x02, sp)
      000032 97               [ 1]   93 	ld	xl, a
                                     94 ;	./src/stm8s_uart1_GetITStatus.c: 80: if (((UART1->SR & itpos) != (uint8_t)0x00) && enablestatus)
      000033 C6 52 30         [ 1]   95 	ld	a, 0x5230
      000036 14 01            [ 1]   96 	and	a, (0x01, sp)
      000038 27 08            [ 1]   97 	jreq	00102$
      00003A 9F               [ 1]   98 	ld	a, xl
      00003B 4D               [ 1]   99 	tnz	a
      00003C 27 04            [ 1]  100 	jreq	00102$
                                    101 ;	./src/stm8s_uart1_GetITStatus.c: 83: pendingbitstatus = SET;
      00003E A6 01            [ 1]  102 	ld	a, #0x01
      000040 20 37            [ 2]  103 	jra	00118$
      000042                        104 00102$:
                                    105 ;	./src/stm8s_uart1_GetITStatus.c: 88: pendingbitstatus = RESET;
      000042 4F               [ 1]  106 	clr	a
      000043 20 34            [ 2]  107 	jra	00118$
      000045                        108 00117$:
                                    109 ;	./src/stm8s_uart1_GetITStatus.c: 92: else if (UART1_IT == UART1_IT_LBDF)
      000045 1E 05            [ 2]  110 	ldw	x, (0x05, sp)
      000047 A3 03 46         [ 2]  111 	cpw	x, #0x0346
      00004A 26 18            [ 1]  112 	jrne	00114$
                                    113 ;	./src/stm8s_uart1_GetITStatus.c: 95: enablestatus = (uint8_t)((uint8_t)UART1->CR4 & itmask2);
      00004C C6 52 37         [ 1]  114 	ld	a, 0x5237
      00004F 14 02            [ 1]  115 	and	a, (0x02, sp)
      000051 97               [ 1]  116 	ld	xl, a
                                    117 ;	./src/stm8s_uart1_GetITStatus.c: 97: if (((UART1->CR4 & itpos) != (uint8_t)0x00) && enablestatus)
      000052 C6 52 37         [ 1]  118 	ld	a, 0x5237
      000055 14 01            [ 1]  119 	and	a, (0x01, sp)
      000057 27 08            [ 1]  120 	jreq	00106$
      000059 9F               [ 1]  121 	ld	a, xl
      00005A 4D               [ 1]  122 	tnz	a
      00005B 27 04            [ 1]  123 	jreq	00106$
                                    124 ;	./src/stm8s_uart1_GetITStatus.c: 100: pendingbitstatus = SET;
      00005D A6 01            [ 1]  125 	ld	a, #0x01
      00005F 20 18            [ 2]  126 	jra	00118$
      000061                        127 00106$:
                                    128 ;	./src/stm8s_uart1_GetITStatus.c: 105: pendingbitstatus = RESET;
      000061 4F               [ 1]  129 	clr	a
      000062 20 15            [ 2]  130 	jra	00118$
      000064                        131 00114$:
                                    132 ;	./src/stm8s_uart1_GetITStatus.c: 111: enablestatus = (uint8_t)((uint8_t)UART1->CR2 & itmask2);
      000064 C6 52 35         [ 1]  133 	ld	a, 0x5235
      000067 14 02            [ 1]  134 	and	a, (0x02, sp)
      000069 97               [ 1]  135 	ld	xl, a
                                    136 ;	./src/stm8s_uart1_GetITStatus.c: 113: if (((UART1->SR & itpos) != (uint8_t)0x00) && enablestatus)
      00006A C6 52 30         [ 1]  137 	ld	a, 0x5230
      00006D 14 01            [ 1]  138 	and	a, (0x01, sp)
      00006F 27 07            [ 1]  139 	jreq	00110$
      000071 9F               [ 1]  140 	ld	a, xl
      000072 4D               [ 1]  141 	tnz	a
      000073 27 03            [ 1]  142 	jreq	00110$
                                    143 ;	./src/stm8s_uart1_GetITStatus.c: 116: pendingbitstatus = SET;
      000075 A6 01            [ 1]  144 	ld	a, #0x01
                                    145 ;	./src/stm8s_uart1_GetITStatus.c: 121: pendingbitstatus = RESET;
      000077 21                     146 	.byte 0x21
      000078                        147 00110$:
      000078 4F               [ 1]  148 	clr	a
      000079                        149 00118$:
                                    150 ;	./src/stm8s_uart1_GetITStatus.c: 126: return  pendingbitstatus;
                                    151 ;	./src/stm8s_uart1_GetITStatus.c: 127: }
      000079 85               [ 2]  152 	popw	x
      00007A 81               [ 4]  153 	ret
                                    154 	.area CODE
                                    155 	.area CONST
                                    156 	.area INITIALIZER
                                    157 	.area CABS (ABS)
