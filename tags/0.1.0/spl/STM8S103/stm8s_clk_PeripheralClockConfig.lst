                                      1 ;--------------------------------------------------------
                                      2 ; File Created by SDCC : free open source ANSI-C Compiler
                                      3 ; Version 3.9.0 #11195 (FreeBSD)
                                      4 ;--------------------------------------------------------
                                      5 	.module stm8s_clk_PeripheralClockConfig
                                      6 	.optsdcc -mstm8
                                      7 	
                                      8 ;--------------------------------------------------------
                                      9 ; Public variables in this module
                                     10 ;--------------------------------------------------------
                                     11 	.globl _CLK_PeripheralClockConfig
                                     12 ;--------------------------------------------------------
                                     13 ; ram data
                                     14 ;--------------------------------------------------------
                                     15 	.area DATA
                                     16 ;--------------------------------------------------------
                                     17 ; ram data
                                     18 ;--------------------------------------------------------
                                     19 	.area INITIALIZED
                                     20 ;--------------------------------------------------------
                                     21 ; absolute external ram data
                                     22 ;--------------------------------------------------------
                                     23 	.area DABS (ABS)
                                     24 
                                     25 ; default segment ordering for linker
                                     26 	.area HOME
                                     27 	.area GSINIT
                                     28 	.area GSFINAL
                                     29 	.area CONST
                                     30 	.area INITIALIZER
                                     31 	.area CODE
                                     32 
                                     33 ;--------------------------------------------------------
                                     34 ; global & static initialisations
                                     35 ;--------------------------------------------------------
                                     36 	.area HOME
                                     37 	.area GSINIT
                                     38 	.area GSFINAL
                                     39 	.area GSINIT
                                     40 ;--------------------------------------------------------
                                     41 ; Home
                                     42 ;--------------------------------------------------------
                                     43 	.area HOME
                                     44 	.area HOME
                                     45 ;--------------------------------------------------------
                                     46 ; code
                                     47 ;--------------------------------------------------------
                                     48 	.area CODE
                                     49 ;	./src/stm8s_clk_PeripheralClockConfig.c: 50: void CLK_PeripheralClockConfig(CLK_Peripheral_TypeDef CLK_Peripheral, FunctionalState NewState)
                                     50 ;	-----------------------------------------
                                     51 ;	 function CLK_PeripheralClockConfig
                                     52 ;	-----------------------------------------
      000000                         53 _CLK_PeripheralClockConfig:
      000000 89               [ 2]   54 	pushw	x
                                     55 ;	./src/stm8s_clk_PeripheralClockConfig.c: 61: CLK->PCKENR1 |= (uint8_t)((uint8_t)1 << ((uint8_t)CLK_Peripheral & (uint8_t)0x0F));
      000001 7B 05            [ 1]   56 	ld	a, (0x05, sp)
      000003 A4 0F            [ 1]   57 	and	a, #0x0f
      000005 88               [ 1]   58 	push	a
      000006 A6 01            [ 1]   59 	ld	a, #0x01
      000008 6B 02            [ 1]   60 	ld	(0x02, sp), a
      00000A 84               [ 1]   61 	pop	a
      00000B 4D               [ 1]   62 	tnz	a
      00000C 27 05            [ 1]   63 	jreq	00128$
      00000E                         64 00127$:
      00000E 08 01            [ 1]   65 	sll	(0x01, sp)
      000010 4A               [ 1]   66 	dec	a
      000011 26 FB            [ 1]   67 	jrne	00127$
      000013                         68 00128$:
                                     69 ;	./src/stm8s_clk_PeripheralClockConfig.c: 66: CLK->PCKENR1 &= (uint8_t)(~(uint8_t)(((uint8_t)1 << ((uint8_t)CLK_Peripheral & (uint8_t)0x0F))));
      000013 7B 01            [ 1]   70 	ld	a, (0x01, sp)
      000015 43               [ 1]   71 	cpl	a
      000016 6B 02            [ 1]   72 	ld	(0x02, sp), a
                                     73 ;	./src/stm8s_clk_PeripheralClockConfig.c: 56: if (((uint8_t)CLK_Peripheral & (uint8_t)0x10) == 0x00)
      000018 7B 05            [ 1]   74 	ld	a, (0x05, sp)
      00001A A5 10            [ 1]   75 	bcp	a, #0x10
      00001C 26 15            [ 1]   76 	jrne	00108$
                                     77 ;	./src/stm8s_clk_PeripheralClockConfig.c: 61: CLK->PCKENR1 |= (uint8_t)((uint8_t)1 << ((uint8_t)CLK_Peripheral & (uint8_t)0x0F));
      00001E C6 50 C7         [ 1]   78 	ld	a, 0x50c7
                                     79 ;	./src/stm8s_clk_PeripheralClockConfig.c: 58: if (NewState != DISABLE)
      000021 0D 06            [ 1]   80 	tnz	(0x06, sp)
      000023 27 07            [ 1]   81 	jreq	00102$
                                     82 ;	./src/stm8s_clk_PeripheralClockConfig.c: 61: CLK->PCKENR1 |= (uint8_t)((uint8_t)1 << ((uint8_t)CLK_Peripheral & (uint8_t)0x0F));
      000025 1A 01            [ 1]   83 	or	a, (0x01, sp)
      000027 C7 50 C7         [ 1]   84 	ld	0x50c7, a
      00002A 20 1A            [ 2]   85 	jra	00110$
      00002C                         86 00102$:
                                     87 ;	./src/stm8s_clk_PeripheralClockConfig.c: 66: CLK->PCKENR1 &= (uint8_t)(~(uint8_t)(((uint8_t)1 << ((uint8_t)CLK_Peripheral & (uint8_t)0x0F))));
      00002C 14 02            [ 1]   88 	and	a, (0x02, sp)
      00002E C7 50 C7         [ 1]   89 	ld	0x50c7, a
      000031 20 13            [ 2]   90 	jra	00110$
      000033                         91 00108$:
                                     92 ;	./src/stm8s_clk_PeripheralClockConfig.c: 74: CLK->PCKENR2 |= (uint8_t)((uint8_t)1 << ((uint8_t)CLK_Peripheral & (uint8_t)0x0F));
      000033 C6 50 CA         [ 1]   93 	ld	a, 0x50ca
                                     94 ;	./src/stm8s_clk_PeripheralClockConfig.c: 71: if (NewState != DISABLE)
      000036 0D 06            [ 1]   95 	tnz	(0x06, sp)
      000038 27 07            [ 1]   96 	jreq	00105$
                                     97 ;	./src/stm8s_clk_PeripheralClockConfig.c: 74: CLK->PCKENR2 |= (uint8_t)((uint8_t)1 << ((uint8_t)CLK_Peripheral & (uint8_t)0x0F));
      00003A 1A 01            [ 1]   98 	or	a, (0x01, sp)
      00003C C7 50 CA         [ 1]   99 	ld	0x50ca, a
      00003F 20 05            [ 2]  100 	jra	00110$
      000041                        101 00105$:
                                    102 ;	./src/stm8s_clk_PeripheralClockConfig.c: 79: CLK->PCKENR2 &= (uint8_t)(~(uint8_t)(((uint8_t)1 << ((uint8_t)CLK_Peripheral & (uint8_t)0x0F))));
      000041 14 02            [ 1]  103 	and	a, (0x02, sp)
      000043 C7 50 CA         [ 1]  104 	ld	0x50ca, a
      000046                        105 00110$:
                                    106 ;	./src/stm8s_clk_PeripheralClockConfig.c: 82: }
      000046 85               [ 2]  107 	popw	x
      000047 81               [ 4]  108 	ret
                                    109 	.area CODE
                                    110 	.area CONST
                                    111 	.area INITIALIZER
                                    112 	.area CABS (ABS)
