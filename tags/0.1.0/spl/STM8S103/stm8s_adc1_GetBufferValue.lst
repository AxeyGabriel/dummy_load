                                      1 ;--------------------------------------------------------
                                      2 ; File Created by SDCC : free open source ANSI-C Compiler
                                      3 ; Version 3.9.0 #11195 (FreeBSD)
                                      4 ;--------------------------------------------------------
                                      5 	.module stm8s_adc1_GetBufferValue
                                      6 	.optsdcc -mstm8
                                      7 	
                                      8 ;--------------------------------------------------------
                                      9 ; Public variables in this module
                                     10 ;--------------------------------------------------------
                                     11 	.globl _ADC1_GetBufferValue
                                     12 ;--------------------------------------------------------
                                     13 ; ram data
                                     14 ;--------------------------------------------------------
                                     15 	.area DATA
                                     16 ;--------------------------------------------------------
                                     17 ; ram data
                                     18 ;--------------------------------------------------------
                                     19 	.area INITIALIZED
                                     20 ;--------------------------------------------------------
                                     21 ; absolute external ram data
                                     22 ;--------------------------------------------------------
                                     23 	.area DABS (ABS)
                                     24 
                                     25 ; default segment ordering for linker
                                     26 	.area HOME
                                     27 	.area GSINIT
                                     28 	.area GSFINAL
                                     29 	.area CONST
                                     30 	.area INITIALIZER
                                     31 	.area CODE
                                     32 
                                     33 ;--------------------------------------------------------
                                     34 ; global & static initialisations
                                     35 ;--------------------------------------------------------
                                     36 	.area HOME
                                     37 	.area GSINIT
                                     38 	.area GSFINAL
                                     39 	.area GSINIT
                                     40 ;--------------------------------------------------------
                                     41 ; Home
                                     42 ;--------------------------------------------------------
                                     43 	.area HOME
                                     44 	.area HOME
                                     45 ;--------------------------------------------------------
                                     46 ; code
                                     47 ;--------------------------------------------------------
                                     48 	.area CODE
                                     49 ;	./src/stm8s_adc1_GetBufferValue.c: 48: uint16_t ADC1_GetBufferValue(uint8_t Buffer)
                                     50 ;	-----------------------------------------
                                     51 ;	 function ADC1_GetBufferValue
                                     52 ;	-----------------------------------------
      000000                         53 _ADC1_GetBufferValue:
      000000 52 04            [ 2]   54 	sub	sp, #4
                                     55 ;	./src/stm8s_adc1_GetBufferValue.c: 56: if ((ADC1->CR2 & ADC1_CR2_ALIGN) != 0) /* Right alignment */
      000002 C6 54 02         [ 1]   56 	ld	a, 0x5402
      000005 6B 04            [ 1]   57 	ld	(0x04, sp), a
                                     58 ;	./src/stm8s_adc1_GetBufferValue.c: 59: templ = *(uint8_t*)(uint16_t)((uint16_t)ADC1_BaseAddress + (uint8_t)(Buffer << 1) + 1);
      000007 7B 07            [ 1]   59 	ld	a, (0x07, sp)
      000009 48               [ 1]   60 	sll	a
      00000A 5F               [ 1]   61 	clrw	x
      00000B 97               [ 1]   62 	ld	xl, a
      00000C 51               [ 1]   63 	exgw	x, y
      00000D 93               [ 1]   64 	ldw	x, y
      00000E 1C 53 E1         [ 2]   65 	addw	x, #0x53e1
                                     66 ;	./src/stm8s_adc1_GetBufferValue.c: 61: temph = *(uint8_t*)(uint16_t)((uint16_t)ADC1_BaseAddress + (uint8_t)(Buffer << 1));
      000011 72 A9 53 E0      [ 2]   67 	addw	y, #0x53e0
                                     68 ;	./src/stm8s_adc1_GetBufferValue.c: 59: templ = *(uint8_t*)(uint16_t)((uint16_t)ADC1_BaseAddress + (uint8_t)(Buffer << 1) + 1);
                                     69 ;	./src/stm8s_adc1_GetBufferValue.c: 61: temph = *(uint8_t*)(uint16_t)((uint16_t)ADC1_BaseAddress + (uint8_t)(Buffer << 1));
                                     70 ;	./src/stm8s_adc1_GetBufferValue.c: 59: templ = *(uint8_t*)(uint16_t)((uint16_t)ADC1_BaseAddress + (uint8_t)(Buffer << 1) + 1);
      000015 F6               [ 1]   71 	ld	a, (x)
      000016 97               [ 1]   72 	ld	xl, a
                                     73 ;	./src/stm8s_adc1_GetBufferValue.c: 61: temph = *(uint8_t*)(uint16_t)((uint16_t)ADC1_BaseAddress + (uint8_t)(Buffer << 1));
      000017 90 F6            [ 1]   74 	ld	a, (y)
                                     75 ;	./src/stm8s_adc1_GetBufferValue.c: 56: if ((ADC1->CR2 & ADC1_CR2_ALIGN) != 0) /* Right alignment */
      000019 88               [ 1]   76 	push	a
      00001A 7B 05            [ 1]   77 	ld	a, (0x05, sp)
      00001C A5 08            [ 1]   78 	bcp	a, #0x08
      00001E 84               [ 1]   79 	pop	a
      00001F 27 14            [ 1]   80 	jreq	00102$
                                     81 ;	./src/stm8s_adc1_GetBufferValue.c: 59: templ = *(uint8_t*)(uint16_t)((uint16_t)ADC1_BaseAddress + (uint8_t)(Buffer << 1) + 1);
                                     82 ;	./src/stm8s_adc1_GetBufferValue.c: 61: temph = *(uint8_t*)(uint16_t)((uint16_t)ADC1_BaseAddress + (uint8_t)(Buffer << 1));
                                     83 ;	./src/stm8s_adc1_GetBufferValue.c: 63: temph = (uint16_t)(templ | (uint16_t)(temph << (uint8_t)8));
      000021 0F 02            [ 1]   84 	clr	(0x02, sp)
      000023 41               [ 1]   85 	exg	a, xl
      000024 6B 04            [ 1]   86 	ld	(0x04, sp), a
      000026 41               [ 1]   87 	exg	a, xl
      000027 0F 03            [ 1]   88 	clr	(0x03, sp)
      000029 1A 03            [ 1]   89 	or	a, (0x03, sp)
      00002B 95               [ 1]   90 	ld	xh, a
      00002C 7B 04            [ 1]   91 	ld	a, (0x04, sp)
      00002E 1A 02            [ 1]   92 	or	a, (0x02, sp)
      000030 97               [ 1]   93 	ld	xl, a
      000031 1F 03            [ 2]   94 	ldw	(0x03, sp), x
      000033 20 15            [ 2]   95 	jra	00103$
      000035                         96 00102$:
                                     97 ;	./src/stm8s_adc1_GetBufferValue.c: 68: temph = *(uint8_t*)(uint16_t)((uint16_t)ADC1_BaseAddress + (uint8_t)(Buffer << 1));
                                     98 ;	./src/stm8s_adc1_GetBufferValue.c: 70: templ = *(uint8_t*)(uint16_t)((uint16_t)ADC1_BaseAddress + (uint8_t)(Buffer << 1) + 1);
                                     99 ;	./src/stm8s_adc1_GetBufferValue.c: 72: temph = (uint16_t)((uint16_t)((uint16_t)templ << 6) | (uint16_t)(temph << 8));
      000035 02               [ 1]  100 	rlwa	x
      000036 4F               [ 1]  101 	clr	a
      000037 01               [ 1]  102 	rrwa	x
      000038 58               [ 2]  103 	sllw	x
      000039 58               [ 2]  104 	sllw	x
      00003A 58               [ 2]  105 	sllw	x
      00003B 58               [ 2]  106 	sllw	x
      00003C 58               [ 2]  107 	sllw	x
      00003D 58               [ 2]  108 	sllw	x
      00003E 1F 01            [ 2]  109 	ldw	(0x01, sp), x
      000040 97               [ 1]  110 	ld	xl, a
      000041 7B 02            [ 1]  111 	ld	a, (0x02, sp)
      000043 6B 04            [ 1]  112 	ld	(0x04, sp), a
      000045 9F               [ 1]  113 	ld	a, xl
      000046 1A 01            [ 1]  114 	or	a, (0x01, sp)
      000048 6B 03            [ 1]  115 	ld	(0x03, sp), a
      00004A                        116 00103$:
                                    117 ;	./src/stm8s_adc1_GetBufferValue.c: 75: return ((uint16_t)temph);
      00004A 1E 03            [ 2]  118 	ldw	x, (0x03, sp)
                                    119 ;	./src/stm8s_adc1_GetBufferValue.c: 76: }
      00004C 5B 04            [ 2]  120 	addw	sp, #4
      00004E 81               [ 4]  121 	ret
                                    122 	.area CODE
                                    123 	.area CONST
                                    124 	.area INITIALIZER
                                    125 	.area CABS (ABS)
