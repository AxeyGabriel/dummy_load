                                      1 ;--------------------------------------------------------
                                      2 ; File Created by SDCC : free open source ANSI-C Compiler
                                      3 ; Version 3.9.0 #11195 (FreeBSD)
                                      4 ;--------------------------------------------------------
                                      5 	.module stm8s_i2c_Init
                                      6 	.optsdcc -mstm8
                                      7 	
                                      8 ;--------------------------------------------------------
                                      9 ; Public variables in this module
                                     10 ;--------------------------------------------------------
                                     11 	.globl _I2C_AcknowledgeConfig
                                     12 	.globl _I2C_Init
                                     13 ;--------------------------------------------------------
                                     14 ; ram data
                                     15 ;--------------------------------------------------------
                                     16 	.area DATA
                                     17 ;--------------------------------------------------------
                                     18 ; ram data
                                     19 ;--------------------------------------------------------
                                     20 	.area INITIALIZED
                                     21 ;--------------------------------------------------------
                                     22 ; absolute external ram data
                                     23 ;--------------------------------------------------------
                                     24 	.area DABS (ABS)
                                     25 
                                     26 ; default segment ordering for linker
                                     27 	.area HOME
                                     28 	.area GSINIT
                                     29 	.area GSFINAL
                                     30 	.area CONST
                                     31 	.area INITIALIZER
                                     32 	.area CODE
                                     33 
                                     34 ;--------------------------------------------------------
                                     35 ; global & static initialisations
                                     36 ;--------------------------------------------------------
                                     37 	.area HOME
                                     38 	.area GSINIT
                                     39 	.area GSFINAL
                                     40 	.area GSINIT
                                     41 ;--------------------------------------------------------
                                     42 ; Home
                                     43 ;--------------------------------------------------------
                                     44 	.area HOME
                                     45 	.area HOME
                                     46 ;--------------------------------------------------------
                                     47 ; code
                                     48 ;--------------------------------------------------------
                                     49 	.area CODE
                                     50 ;	./src/stm8s_i2c_Init.c: 58: void I2C_Init(uint32_t OutputClockFrequencyHz, uint16_t OwnAddress, 
                                     51 ;	-----------------------------------------
                                     52 ;	 function I2C_Init
                                     53 ;	-----------------------------------------
      000000                         54 _I2C_Init:
      000000 52 0B            [ 2]   55 	sub	sp, #11
                                     56 ;	./src/stm8s_i2c_Init.c: 64: uint8_t tmpccrh = 0;
      000002 0F 09            [ 1]   57 	clr	(0x09, sp)
                                     58 ;	./src/stm8s_i2c_Init.c: 77: I2C->FREQR &= (uint8_t)(~I2C_FREQR_FREQ);
      000004 C6 52 12         [ 1]   59 	ld	a, 0x5212
      000007 A4 C0            [ 1]   60 	and	a, #0xc0
      000009 C7 52 12         [ 1]   61 	ld	0x5212, a
                                     62 ;	./src/stm8s_i2c_Init.c: 79: I2C->FREQR |= InputClockFrequencyMHz;
      00000C C6 52 12         [ 1]   63 	ld	a, 0x5212
      00000F 1A 17            [ 1]   64 	or	a, (0x17, sp)
      000011 C7 52 12         [ 1]   65 	ld	0x5212, a
                                     66 ;	./src/stm8s_i2c_Init.c: 83: I2C->CR1 &= (uint8_t)(~I2C_CR1_PE);
      000014 72 11 52 10      [ 1]   67 	bres	21008, #0
                                     68 ;	./src/stm8s_i2c_Init.c: 86: I2C->CCRH &= (uint8_t)(~(I2C_CCRH_FS | I2C_CCRH_DUTY | I2C_CCRH_CCR));
      000018 C6 52 1C         [ 1]   69 	ld	a, 0x521c
      00001B A4 30            [ 1]   70 	and	a, #0x30
      00001D C7 52 1C         [ 1]   71 	ld	0x521c, a
                                     72 ;	./src/stm8s_i2c_Init.c: 87: I2C->CCRL &= (uint8_t)(~I2C_CCRL_CCR);
      000020 C6 52 1B         [ 1]   73 	ld	a, 0x521b
      000023 35 00 52 1B      [ 1]   74 	mov	0x521b+0, #0x00
                                     75 ;	./src/stm8s_i2c_Init.c: 98: result = (uint16_t) ((InputClockFrequencyMHz * 1000000) / (OutputClockFrequencyHz * 3));
      000027 5F               [ 1]   76 	clrw	x
      000028 7B 17            [ 1]   77 	ld	a, (0x17, sp)
      00002A 97               [ 1]   78 	ld	xl, a
      00002B 90 5F            [ 1]   79 	clrw	y
      00002D 89               [ 2]   80 	pushw	x
      00002E 90 89            [ 2]   81 	pushw	y
      000030 4B 40            [ 1]   82 	push	#0x40
      000032 4B 42            [ 1]   83 	push	#0x42
      000034 4B 0F            [ 1]   84 	push	#0x0f
      000036 4B 00            [ 1]   85 	push	#0x00
      000038 CDr00r00         [ 4]   86 	call	__mullong
      00003B 5B 08            [ 2]   87 	addw	sp, #8
      00003D 1F 07            [ 2]   88 	ldw	(0x07, sp), x
      00003F 17 05            [ 2]   89 	ldw	(0x05, sp), y
                                     90 ;	./src/stm8s_i2c_Init.c: 90: if (OutputClockFrequencyHz > I2C_MAX_STANDARD_FREQ) /* FAST MODE */
      000041 AE 86 A0         [ 2]   91 	ldw	x, #0x86a0
      000044 13 10            [ 2]   92 	cpw	x, (0x10, sp)
      000046 A6 01            [ 1]   93 	ld	a, #0x01
      000048 12 0F            [ 1]   94 	sbc	a, (0x0f, sp)
      00004A 4F               [ 1]   95 	clr	a
      00004B 12 0E            [ 1]   96 	sbc	a, (0x0e, sp)
      00004D 25 03            [ 1]   97 	jrc	00133$
      00004F CCr00rD3         [ 2]   98 	jp	00109$
      000052                         99 00133$:
                                    100 ;	./src/stm8s_i2c_Init.c: 93: tmpccrh = I2C_CCRH_FS;
      000052 A6 80            [ 1]  101 	ld	a, #0x80
      000054 6B 09            [ 1]  102 	ld	(0x09, sp), a
                                    103 ;	./src/stm8s_i2c_Init.c: 95: if (I2C_DutyCycle == I2C_DUTYCYCLE_2)
      000056 0D 14            [ 1]  104 	tnz	(0x14, sp)
      000058 26 23            [ 1]  105 	jrne	00102$
                                    106 ;	./src/stm8s_i2c_Init.c: 98: result = (uint16_t) ((InputClockFrequencyMHz * 1000000) / (OutputClockFrequencyHz * 3));
      00005A 1E 10            [ 2]  107 	ldw	x, (0x10, sp)
      00005C 89               [ 2]  108 	pushw	x
      00005D 1E 10            [ 2]  109 	ldw	x, (0x10, sp)
      00005F 89               [ 2]  110 	pushw	x
      000060 4B 03            [ 1]  111 	push	#0x03
      000062 5F               [ 1]  112 	clrw	x
      000063 89               [ 2]  113 	pushw	x
      000064 4B 00            [ 1]  114 	push	#0x00
      000066 CDr00r00         [ 4]  115 	call	__mullong
      000069 5B 08            [ 2]  116 	addw	sp, #8
      00006B 89               [ 2]  117 	pushw	x
      00006C 90 89            [ 2]  118 	pushw	y
      00006E 1E 0B            [ 2]  119 	ldw	x, (0x0b, sp)
      000070 89               [ 2]  120 	pushw	x
      000071 1E 0B            [ 2]  121 	ldw	x, (0x0b, sp)
      000073 89               [ 2]  122 	pushw	x
      000074 CDr00r00         [ 4]  123 	call	__divulong
      000077 5B 08            [ 2]  124 	addw	sp, #8
      000079 1F 0A            [ 2]  125 	ldw	(0x0a, sp), x
      00007B 20 2E            [ 2]  126 	jra	00103$
      00007D                        127 00102$:
                                    128 ;	./src/stm8s_i2c_Init.c: 103: result = (uint16_t) ((InputClockFrequencyMHz * 1000000) / (OutputClockFrequencyHz * 25));
      00007D 1E 10            [ 2]  129 	ldw	x, (0x10, sp)
      00007F 89               [ 2]  130 	pushw	x
      000080 1E 10            [ 2]  131 	ldw	x, (0x10, sp)
      000082 89               [ 2]  132 	pushw	x
      000083 4B 19            [ 1]  133 	push	#0x19
      000085 5F               [ 1]  134 	clrw	x
      000086 89               [ 2]  135 	pushw	x
      000087 4B 00            [ 1]  136 	push	#0x00
      000089 CDr00r00         [ 4]  137 	call	__mullong
      00008C 5B 08            [ 2]  138 	addw	sp, #8
      00008E 1F 03            [ 2]  139 	ldw	(0x03, sp), x
      000090 17 01            [ 2]  140 	ldw	(0x01, sp), y
      000092 1E 03            [ 2]  141 	ldw	x, (0x03, sp)
      000094 89               [ 2]  142 	pushw	x
      000095 1E 03            [ 2]  143 	ldw	x, (0x03, sp)
      000097 89               [ 2]  144 	pushw	x
      000098 1E 0B            [ 2]  145 	ldw	x, (0x0b, sp)
      00009A 89               [ 2]  146 	pushw	x
      00009B 1E 0B            [ 2]  147 	ldw	x, (0x0b, sp)
      00009D 89               [ 2]  148 	pushw	x
      00009E CDr00r00         [ 4]  149 	call	__divulong
      0000A1 5B 08            [ 2]  150 	addw	sp, #8
      0000A3 1F 0A            [ 2]  151 	ldw	(0x0a, sp), x
      0000A5 17 08            [ 2]  152 	ldw	(0x08, sp), y
                                    153 ;	./src/stm8s_i2c_Init.c: 105: tmpccrh |= I2C_CCRH_DUTY;
      0000A7 A6 C0            [ 1]  154 	ld	a, #0xc0
      0000A9 6B 09            [ 1]  155 	ld	(0x09, sp), a
      0000AB                        156 00103$:
                                    157 ;	./src/stm8s_i2c_Init.c: 109: if (result < (uint16_t)0x01)
      0000AB 1E 0A            [ 2]  158 	ldw	x, (0x0a, sp)
      0000AD A3 00 01         [ 2]  159 	cpw	x, #0x0001
      0000B0 24 05            [ 1]  160 	jrnc	00105$
                                    161 ;	./src/stm8s_i2c_Init.c: 112: result = (uint16_t)0x0001;
      0000B2 AE 00 01         [ 2]  162 	ldw	x, #0x0001
      0000B5 1F 0A            [ 2]  163 	ldw	(0x0a, sp), x
      0000B7                        164 00105$:
                                    165 ;	./src/stm8s_i2c_Init.c: 118: tmpval = ((InputClockFrequencyMHz * 3) / 10) + 1;
      0000B7 5F               [ 1]  166 	clrw	x
      0000B8 7B 17            [ 1]  167 	ld	a, (0x17, sp)
      0000BA 97               [ 1]  168 	ld	xl, a
      0000BB 89               [ 2]  169 	pushw	x
      0000BC 58               [ 2]  170 	sllw	x
      0000BD 72 FB 01         [ 2]  171 	addw	x, (1, sp)
      0000C0 5B 02            [ 2]  172 	addw	sp, #2
      0000C2 4B 0A            [ 1]  173 	push	#0x0a
      0000C4 4B 00            [ 1]  174 	push	#0x00
      0000C6 89               [ 2]  175 	pushw	x
      0000C7 CDr00r00         [ 4]  176 	call	__divsint
      0000CA 5B 04            [ 2]  177 	addw	sp, #4
      0000CC 5C               [ 1]  178 	incw	x
      0000CD 9F               [ 1]  179 	ld	a, xl
                                    180 ;	./src/stm8s_i2c_Init.c: 119: I2C->TRISER = (uint8_t)tmpval;
      0000CE C7 52 1D         [ 1]  181 	ld	0x521d, a
      0000D1 20 27            [ 2]  182 	jra	00110$
      0000D3                        183 00109$:
                                    184 ;	./src/stm8s_i2c_Init.c: 126: result = (uint16_t)((InputClockFrequencyMHz * 1000000) / (OutputClockFrequencyHz << (uint8_t)1));
      0000D3 1E 10            [ 2]  185 	ldw	x, (0x10, sp)
      0000D5 16 0E            [ 2]  186 	ldw	y, (0x0e, sp)
      0000D7 58               [ 2]  187 	sllw	x
      0000D8 90 59            [ 2]  188 	rlcw	y
      0000DA 89               [ 2]  189 	pushw	x
      0000DB 90 89            [ 2]  190 	pushw	y
      0000DD 1E 0B            [ 2]  191 	ldw	x, (0x0b, sp)
      0000DF 89               [ 2]  192 	pushw	x
      0000E0 1E 0B            [ 2]  193 	ldw	x, (0x0b, sp)
      0000E2 89               [ 2]  194 	pushw	x
      0000E3 CDr00r00         [ 4]  195 	call	__divulong
      0000E6 5B 08            [ 2]  196 	addw	sp, #8
                                    197 ;	./src/stm8s_i2c_Init.c: 129: if (result < (uint16_t)0x0004)
      0000E8 1F 0A            [ 2]  198 	ldw	(0x0a, sp), x
      0000EA A3 00 04         [ 2]  199 	cpw	x, #0x0004
      0000ED 24 05            [ 1]  200 	jrnc	00107$
                                    201 ;	./src/stm8s_i2c_Init.c: 132: result = (uint16_t)0x0004;
      0000EF AE 00 04         [ 2]  202 	ldw	x, #0x0004
      0000F2 1F 0A            [ 2]  203 	ldw	(0x0a, sp), x
      0000F4                        204 00107$:
                                    205 ;	./src/stm8s_i2c_Init.c: 138: I2C->TRISER = (uint8_t)(InputClockFrequencyMHz + (uint8_t)1);
      0000F4 7B 17            [ 1]  206 	ld	a, (0x17, sp)
      0000F6 4C               [ 1]  207 	inc	a
      0000F7 C7 52 1D         [ 1]  208 	ld	0x521d, a
      0000FA                        209 00110$:
                                    210 ;	./src/stm8s_i2c_Init.c: 143: I2C->CCRL = (uint8_t)result;
      0000FA 7B 0B            [ 1]  211 	ld	a, (0x0b, sp)
      0000FC C7 52 1B         [ 1]  212 	ld	0x521b, a
                                    213 ;	./src/stm8s_i2c_Init.c: 144: I2C->CCRH = (uint8_t)((uint8_t)((uint8_t)(result >> 8) & I2C_CCRH_CCR) | tmpccrh);
      0000FF 7B 0A            [ 1]  214 	ld	a, (0x0a, sp)
      000101 6B 0B            [ 1]  215 	ld	(0x0b, sp), a
      000103 0F 0A            [ 1]  216 	clr	(0x0a, sp)
      000105 7B 0B            [ 1]  217 	ld	a, (0x0b, sp)
      000107 A4 0F            [ 1]  218 	and	a, #0x0f
      000109 1A 09            [ 1]  219 	or	a, (0x09, sp)
      00010B C7 52 1C         [ 1]  220 	ld	0x521c, a
                                    221 ;	./src/stm8s_i2c_Init.c: 147: I2C->CR1 |= I2C_CR1_PE;
      00010E 72 10 52 10      [ 1]  222 	bset	21008, #0
                                    223 ;	./src/stm8s_i2c_Init.c: 150: I2C_AcknowledgeConfig(Ack);
      000112 7B 15            [ 1]  224 	ld	a, (0x15, sp)
      000114 88               [ 1]  225 	push	a
      000115 CDr00r00         [ 4]  226 	call	_I2C_AcknowledgeConfig
      000118 84               [ 1]  227 	pop	a
                                    228 ;	./src/stm8s_i2c_Init.c: 153: I2C->OARL = (uint8_t)(OwnAddress);
      000119 7B 13            [ 1]  229 	ld	a, (0x13, sp)
      00011B C7 52 13         [ 1]  230 	ld	0x5213, a
                                    231 ;	./src/stm8s_i2c_Init.c: 154: I2C->OARH = (uint8_t)((uint8_t)(AddMode | I2C_OARH_ADDCONF) |
      00011E 7B 16            [ 1]  232 	ld	a, (0x16, sp)
      000120 AA 40            [ 1]  233 	or	a, #0x40
      000122 6B 0B            [ 1]  234 	ld	(0x0b, sp), a
                                    235 ;	./src/stm8s_i2c_Init.c: 155: (uint8_t)((OwnAddress & (uint16_t)0x0300) >> (uint8_t)7));
      000124 4F               [ 1]  236 	clr	a
      000125 97               [ 1]  237 	ld	xl, a
      000126 7B 12            [ 1]  238 	ld	a, (0x12, sp)
      000128 A4 03            [ 1]  239 	and	a, #0x03
      00012A 95               [ 1]  240 	ld	xh, a
      00012B A6 80            [ 1]  241 	ld	a, #0x80
      00012D 62               [ 2]  242 	div	x, a
      00012E 9F               [ 1]  243 	ld	a, xl
      00012F 1A 0B            [ 1]  244 	or	a, (0x0b, sp)
      000131 C7 52 14         [ 1]  245 	ld	0x5214, a
                                    246 ;	./src/stm8s_i2c_Init.c: 156: }
      000134 5B 0B            [ 2]  247 	addw	sp, #11
      000136 81               [ 4]  248 	ret
                                    249 	.area CODE
                                    250 	.area CONST
                                    251 	.area INITIALIZER
                                    252 	.area CABS (ABS)
