                                      1 ;--------------------------------------------------------
                                      2 ; File Created by SDCC : free open source ANSI-C Compiler
                                      3 ; Version 3.9.0 #11195 (FreeBSD)
                                      4 ;--------------------------------------------------------
                                      5 	.module stm8s_clk_GetFlagStatus
                                      6 	.optsdcc -mstm8
                                      7 	
                                      8 ;--------------------------------------------------------
                                      9 ; Public variables in this module
                                     10 ;--------------------------------------------------------
                                     11 	.globl _CLK_GetFlagStatus
                                     12 ;--------------------------------------------------------
                                     13 ; ram data
                                     14 ;--------------------------------------------------------
                                     15 	.area DATA
                                     16 ;--------------------------------------------------------
                                     17 ; ram data
                                     18 ;--------------------------------------------------------
                                     19 	.area INITIALIZED
                                     20 ;--------------------------------------------------------
                                     21 ; absolute external ram data
                                     22 ;--------------------------------------------------------
                                     23 	.area DABS (ABS)
                                     24 
                                     25 ; default segment ordering for linker
                                     26 	.area HOME
                                     27 	.area GSINIT
                                     28 	.area GSFINAL
                                     29 	.area CONST
                                     30 	.area INITIALIZER
                                     31 	.area CODE
                                     32 
                                     33 ;--------------------------------------------------------
                                     34 ; global & static initialisations
                                     35 ;--------------------------------------------------------
                                     36 	.area HOME
                                     37 	.area GSINIT
                                     38 	.area GSFINAL
                                     39 	.area GSINIT
                                     40 ;--------------------------------------------------------
                                     41 ; Home
                                     42 ;--------------------------------------------------------
                                     43 	.area HOME
                                     44 	.area HOME
                                     45 ;--------------------------------------------------------
                                     46 ; code
                                     47 ;--------------------------------------------------------
                                     48 	.area CODE
                                     49 ;	./src/stm8s_clk_GetFlagStatus.c: 49: FlagStatus CLK_GetFlagStatus(CLK_Flag_TypeDef CLK_FLAG)
                                     50 ;	-----------------------------------------
                                     51 ;	 function CLK_GetFlagStatus
                                     52 ;	-----------------------------------------
      000000                         53 _CLK_GetFlagStatus:
      000000 88               [ 1]   54 	push	a
                                     55 ;	./src/stm8s_clk_GetFlagStatus.c: 59: statusreg = (uint16_t)((uint16_t)CLK_FLAG & (uint16_t)0xFF00);
      000001 4F               [ 1]   56 	clr	a
      000002 97               [ 1]   57 	ld	xl, a
      000003 7B 04            [ 1]   58 	ld	a, (0x04, sp)
      000005 95               [ 1]   59 	ld	xh, a
                                     60 ;	./src/stm8s_clk_GetFlagStatus.c: 62: if (statusreg == 0x0100) /* The flag to check is in ICKRregister */
      000006 A3 01 00         [ 2]   61 	cpw	x, #0x0100
      000009 26 05            [ 1]   62 	jrne	00111$
                                     63 ;	./src/stm8s_clk_GetFlagStatus.c: 64: tmpreg = CLK->ICKR;
      00000B C6 50 C0         [ 1]   64 	ld	a, 0x50c0
      00000E 20 21            [ 2]   65 	jra	00112$
      000010                         66 00111$:
                                     67 ;	./src/stm8s_clk_GetFlagStatus.c: 66: else if (statusreg == 0x0200) /* The flag to check is in ECKRregister */
      000010 A3 02 00         [ 2]   68 	cpw	x, #0x0200
      000013 26 05            [ 1]   69 	jrne	00108$
                                     70 ;	./src/stm8s_clk_GetFlagStatus.c: 68: tmpreg = CLK->ECKR;
      000015 C6 50 C1         [ 1]   71 	ld	a, 0x50c1
      000018 20 17            [ 2]   72 	jra	00112$
      00001A                         73 00108$:
                                     74 ;	./src/stm8s_clk_GetFlagStatus.c: 70: else if (statusreg == 0x0300) /* The flag to check is in SWIC register */
      00001A A3 03 00         [ 2]   75 	cpw	x, #0x0300
      00001D 26 05            [ 1]   76 	jrne	00105$
                                     77 ;	./src/stm8s_clk_GetFlagStatus.c: 72: tmpreg = CLK->SWCR;
      00001F C6 50 C5         [ 1]   78 	ld	a, 0x50c5
      000022 20 0D            [ 2]   79 	jra	00112$
      000024                         80 00105$:
                                     81 ;	./src/stm8s_clk_GetFlagStatus.c: 74: else if (statusreg == 0x0400) /* The flag to check is in CSS register */
      000024 A3 04 00         [ 2]   82 	cpw	x, #0x0400
      000027 26 05            [ 1]   83 	jrne	00102$
                                     84 ;	./src/stm8s_clk_GetFlagStatus.c: 76: tmpreg = CLK->CSSR;
      000029 C6 50 C8         [ 1]   85 	ld	a, 0x50c8
      00002C 20 03            [ 2]   86 	jra	00112$
      00002E                         87 00102$:
                                     88 ;	./src/stm8s_clk_GetFlagStatus.c: 80: tmpreg = CLK->CCOR;
      00002E C6 50 C9         [ 1]   89 	ld	a, 0x50c9
      000031                         90 00112$:
                                     91 ;	./src/stm8s_clk_GetFlagStatus.c: 83: if ((tmpreg & (uint8_t)CLK_FLAG) != (uint8_t)RESET)
      000031 88               [ 1]   92 	push	a
      000032 7B 06            [ 1]   93 	ld	a, (0x06, sp)
      000034 6B 02            [ 1]   94 	ld	(0x02, sp), a
      000036 84               [ 1]   95 	pop	a
      000037 14 01            [ 1]   96 	and	a, (0x01, sp)
      000039 27 03            [ 1]   97 	jreq	00114$
                                     98 ;	./src/stm8s_clk_GetFlagStatus.c: 85: bitstatus = SET;
      00003B A6 01            [ 1]   99 	ld	a, #0x01
                                    100 ;	./src/stm8s_clk_GetFlagStatus.c: 89: bitstatus = RESET;
      00003D 21                     101 	.byte 0x21
      00003E                        102 00114$:
      00003E 4F               [ 1]  103 	clr	a
      00003F                        104 00115$:
                                    105 ;	./src/stm8s_clk_GetFlagStatus.c: 93: return((FlagStatus)bitstatus);
                                    106 ;	./src/stm8s_clk_GetFlagStatus.c: 94: }
      00003F 5B 01            [ 2]  107 	addw	sp, #1
      000041 81               [ 4]  108 	ret
                                    109 	.area CODE
                                    110 	.area CONST
                                    111 	.area INITIALIZER
                                    112 	.area CABS (ABS)
